name: stable Release

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Workflow run cleanup action
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: Creating .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Install Dependencies & Build
        run: |
          npm ci
          npm run bootstrap
          npm run lerna run build -- --scope @pankod/refine-codemod
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
      - name: Prepare Stable version changesets
        if: "!contains(github.event.head_commit.message, 'ci(changesets): version packages')"
        run: |
          cp -R ./_changeset/* ./.changeset || : && rm -rf ./_changeset/
      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          version: npm run changeset version
          publish: npm run changeset publish
          commit: "ci(changesets): version packages"
          title: "ci(changesets): version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.PANKOD_BOT_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - name: update master branch
        if: ${{ steps.changesets.outputs.published == 'true' }}
        run: |
          git config --global user.email "bot@pankod.com"
          git config --global user.name "pankod-bot"
          git checkout master
          git pull origin master
          rm -rf ./_changeset/
          git commit -am "chore: remove deployed changesets ci skip"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.PANKOD_BOT_TOKEN }}
      - name: update next branch
        if: ${{ steps.changesets.outputs.published == 'true' }}
        run: |
          git config --global user.email "bot@pankod.com"
          git config --global user.name "pankod-bot"
          git fetch origin
          git checkout next
          git pull origin next
          rm -rf ./_changeset/
          git commit -am "chore: remove deployed changesets ci skip"
          git push origin next
        env:
          GITHUB_TOKEN: ${{ secrets.PANKOD_BOT_TOKEN }}
  antd-admin-example:
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ needs.publish.outputs.published == 'true' }}

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Workflow run cleanup action
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get current time
        uses: 1466587594/get-current-time@v1
        id: current-time
        with:
          format: DDMMHm
          utcOffset: "+03:00"
      - name: web docker build
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          repository: refinedev/refine/refine-example
          tags: sha-${{ steps.current-time.outputs.formattedTime }}
          dockerfile: examples/fineFoods/admin/antd/Dockerfile
      - name: Set up kubectl
        uses: matootie/dokube@v1.3.4
        with:
          personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
          clusterName: pankod-k8s
          expirationTime: 1200
      - name: Get nodes
        run: kubectl get nodes
      - name: Deploy refine-example to k8s
        run: |
          cd examples/fineFoods/admin/antd
          echo ${{ env.domain }}
          mv ./k8s/refine-example/Chart.yaml ./k8s/refine-example/Chart.old.yaml &&
          cat ./k8s/refine-example/Chart.old.yaml | grep -v appVersion > ./k8s/refine-example/Chart.yaml &&
          echo -e "\r\nappVersion: sha-${{ steps.current-time.outputs.formattedTime }}\r\n" >> ./k8s/refine-example/Chart.yaml &&
          cat ./k8s/refine-example/Chart.yaml
          helm upgrade refine-example ./k8s/refine-example --install --values=./k8s/refine-example/values.yaml \
            --set ingress.enabled=true \
            --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set ingress.annotations."cert-manager\.io/issuer"=letsencrypt-prod \
            --set ingress.hosts[0].host=${{ env.domain }} \
            --set ingress.hosts[0].paths[0].path="/" \
            --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set ingress.tls[0].secretName=${{ env.domain }} \
            --set ingress.tls[0].hosts[0]=${{ env.domain }} \
        env:
          domain: "example.admin.refine.dev"
  mui-admin-example:
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ needs.publish.outputs.published == 'true' }}

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Workflow run cleanup action
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get current time
        uses: 1466587594/get-current-time@v1
        id: current-time
        with:
          format: DDMMHm
          utcOffset: "+03:00"
      - name: web docker build
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          repository: refinedev/refine/refine-mui-example
          tags: sha-${{ steps.current-time.outputs.formattedTime }}
          dockerfile: examples/fineFoods/admin/mui/Dockerfile
      - name: Set up kubectl
        uses: matootie/dokube@v1.3.4
        with:
          personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
          clusterName: pankod-k8s
          expirationTime: 1200
      - name: Get nodes
        run: kubectl get nodes
      - name: Deploy refine-example to k8s
        run: |
          cd examples/fineFoods/admin/mui
          echo ${{ env.domain }}
          mv ./k8s/refine-example/Chart.yaml ./k8s/refine-example/Chart.old.yaml &&
          cat ./k8s/refine-example/Chart.old.yaml | grep -v appVersion > ./k8s/refine-example/Chart.yaml &&
          echo -e "\r\nappVersion: sha-${{ steps.current-time.outputs.formattedTime }}\r\n" >> ./k8s/refine-example/Chart.yaml &&
          cat ./k8s/refine-example/Chart.yaml
          helm upgrade refine-mui-example ./k8s/refine-example --install --values=./k8s/refine-example/values.yaml \
            --set ingress.enabled=true \
            --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set ingress.annotations."cert-manager\.io/issuer"=letsencrypt-prod \
            --set ingress.hosts[0].host=${{ env.domain }} \
            --set ingress.hosts[0].paths[0].path="/" \
            --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set ingress.tls[0].secretName=${{ env.domain }} \
            --set ingress.tls[0].hosts[0]=${{ env.domain }} \
        env:
          domain: "example.mui.admin.refine.dev"
  client-example:
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ needs.publish.outputs.published == 'true' }}

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Workflow run cleanup action
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: client docker build
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          repository: refinedev/refine/refine-client-example
          tag_with_sha: true
          dockerfile: examples/fineFoods/client/Dockerfile
      - name: Set up kubectl
        uses: matootie/dokube@v1.3.4
        with:
          personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
          clusterName: pankod-k8s
          expirationTime: 1200
      - name: Get nodes
        run: kubectl get nodes
      - name: Deploy refine-example to k8s
        run: |
          cd examples/fineFoods/client
          mv ./k8s/refine-example/Chart.yaml ./k8s/refine-example/Chart.old.yaml &&
          cat ./k8s/refine-example/Chart.old.yaml | grep -v appVersion > ./k8s/refine-example/Chart.yaml &&
          echo -e "\r\nappVersion: sha-${GITHUB_SHA::7}\r\n" >> ./k8s/refine-example/Chart.yaml &&
          cat ./k8s/refine-example/Chart.yaml
          helm upgrade client-refine-example ./k8s/refine-example --install --atomic --values=./k8s/refine-example/values.yaml \
            --set ingress.enabled=true \
            --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set ingress.annotations."cert-manager\.io/issuer"=letsencrypt-prod \
            --set ingress.hosts[0].host=${{ env.domain }} \
            --set ingress.hosts[0].paths[0].path="/" \
            --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set ingress.tls[0].secretName=${{ env.domain }} \
            --set ingress.tls[0].hosts[0]=${{ env.domain }} \
        env:
          domain: "example.refine.dev"
  documentation-live-preview:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Workflow run cleanup action
        uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: live previews docker build
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ghcr.io
          repository: refinedev/refine/refine-live-preview
          dockerfile: packages/live-previews/Dockerfile
          tag_with_sha: true
      - name: Set up kubectl
        uses: matootie/dokube@v1.3.4
        with:
          personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
          clusterName: pankod-k8s
          expirationTime: 1200
      - name: Get nodes
        run: kubectl get nodes
      - name: Deploy refine-live-previews-documentation to k8s
        run: |
          cd packages/live-previews
          mv ./k8s/live-previews/Chart.yaml ./k8s/live-previews/Chart.old.yaml &&
          cat ./k8s/live-previews/Chart.old.yaml | grep -v appVersion > ./k8s/live-previews/Chart.yaml &&
          echo -e "\r\nappVersion: sha-${GITHUB_SHA::7}\r\n" >> ./k8s/live-previews/Chart.yaml &&
          cat ./k8s/live-previews/Chart.yaml
          helm upgrade refine-live-previews-documentation ./k8s/live-previews --install --atomic --timeout 20m0s --values=./k8s/live-previews/values.yaml \
            --set ingress.enabled=true \
            --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
            --set ingress.annotations."cert-manager\.io/issuer"=letsencrypt-prod \
            --set ingress.hosts[0].host=${{ env.domain }} \
            --set ingress.hosts[0].paths[0].path="/" \
            --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set ingress.tls[0].secretName=${{ env.domain }} \
            --set ingress.tls[0].hosts[0]=${{ env.domain }} \
        env:
          domain: "live-preview.refine.dev"
  documentation-gh:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Add key to allow access to repository
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.GH_PAGES_DEPLOY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat <<EOT >> ~/.ssh/config
          Host github.com
          HostName github.com
          IdentityFile ~/.ssh/id_rsa
          EOT
      - name: Build packages
        run: |
          npm ci
          npm run bootstrap
          cd documentation
          npm ci
      - name: Release to GitHub Pages
        env:
          USE_SSH: true
          GIT_USER: pankod-bot
          NODE_ENV: production
        run: |
          cd documentation
          git config --global user.email "bot@pankod.com"
          git config --global user.name "pankod-bot"
          LIVE_PREVIEW_URL=https://live-preview.refine.dev/preview npm run deploy
